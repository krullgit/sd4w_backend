/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package controllers;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class wordList extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"wordList\",\"namespace\":\"controllers\",\"fields\":[{\"name\":\"word\",\"type\":\"string\"},{\"name\":\"cooc\",\"type\":{\"type\":\"map\",\"values\":\"int\"}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    @Deprecated
    public CharSequence word;
    @Deprecated
    public java.util.Map<CharSequence, Integer> cooc;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public wordList() {
    }

    /**
     * All-args constructor.
     */
    public wordList(CharSequence word, java.util.Map<CharSequence, Integer> cooc) {
        this.word = word;
        this.cooc = cooc;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public Object get(int field$) {
        switch (field$) {
            case 0:
                return word;
            case 1:
                return cooc;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0:
                word = (CharSequence) value$;
                break;
            case 1:
                cooc = (java.util.Map<CharSequence, Integer>) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'word' field.
     */
    public CharSequence getWord() {
        return word;
    }

    /**
     * Sets the value of the 'word' field.
     * @param value the value to set.
     */
    public void setWord(CharSequence value) {
        this.word = value;
    }

    /**
     * Gets the value of the 'cooc' field.
     */
    public java.util.Map<CharSequence, Integer> getCooc() {
        return cooc;
    }

    /**
     * Sets the value of the 'cooc' field.
     * @param value the value to set.
     */
    public void setCooc(java.util.Map<CharSequence, Integer> value) {
        this.cooc = value;
    }

    /** Creates a new wordList RecordBuilder */
    public static controllers.wordList.Builder newBuilder() {
        return new controllers.wordList.Builder();
    }

    /** Creates a new wordList RecordBuilder by copying an existing Builder */
    public static controllers.wordList.Builder newBuilder(controllers.wordList.Builder other) {
        return new controllers.wordList.Builder(other);
    }

    /** Creates a new wordList RecordBuilder by copying an existing wordList instance */
    public static controllers.wordList.Builder newBuilder(controllers.wordList other) {
        return new controllers.wordList.Builder(other);
    }

    /**
     * RecordBuilder for wordList instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<wordList>
            implements org.apache.avro.data.RecordBuilder<wordList> {

        private CharSequence word;
        private java.util.Map<CharSequence, Integer> cooc;

        /** Creates a new Builder */
        private Builder() {
            super(controllers.wordList.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(controllers.wordList.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.word)) {
                this.word = data().deepCopy(fields()[0].schema(), other.word);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.cooc)) {
                this.cooc = data().deepCopy(fields()[1].schema(), other.cooc);
                fieldSetFlags()[1] = true;
            }
        }

        /** Creates a Builder by copying an existing wordList instance */
        private Builder(controllers.wordList other) {
            super(controllers.wordList.SCHEMA$);
            if (isValidValue(fields()[0], other.word)) {
                this.word = data().deepCopy(fields()[0].schema(), other.word);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.cooc)) {
                this.cooc = data().deepCopy(fields()[1].schema(), other.cooc);
                fieldSetFlags()[1] = true;
            }
        }

        /** Gets the value of the 'word' field */
        public CharSequence getWord() {
            return word;
        }

        /** Sets the value of the 'word' field */
        public controllers.wordList.Builder setWord(CharSequence value) {
            validate(fields()[0], value);
            this.word = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'word' field has been set */
        public boolean hasWord() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'word' field */
        public controllers.wordList.Builder clearWord() {
            word = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'cooc' field */
        public java.util.Map<CharSequence, Integer> getCooc() {
            return cooc;
        }

        /** Sets the value of the 'cooc' field */
        public controllers.wordList.Builder setCooc(java.util.Map<CharSequence, Integer> value) {
            validate(fields()[1], value);
            this.cooc = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'cooc' field has been set */
        public boolean hasCooc() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'cooc' field */
        public controllers.wordList.Builder clearCooc() {
            cooc = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        public wordList build() {
            try {
                wordList record = new wordList();
                record.word = fieldSetFlags()[0] ? this.word : (CharSequence) defaultValue(fields()[0]);
                record.cooc = fieldSetFlags()[1] ? this.cooc : (java.util.Map<CharSequence, Integer>) defaultValue(fields()[1]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
